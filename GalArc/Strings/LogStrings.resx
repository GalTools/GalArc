<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="HasUpdate" xml:space="preserve">
    <value>New update available!</value>
  </data>
  <data name="NoUpdate" xml:space="preserve">
    <value>You are using the latest version of GalArc.</value>
  </data>
  <data name="Updating" xml:space="preserve">
    <value>Checking for update……</value>
  </data>
  <data name="UpdateError" xml:space="preserve">
    <value>Error occurs while checking for update.</value>
  </data>
  <data name="ValidArchiveDetected" xml:space="preserve">
    <value>Valid {0} v{1} archive detected.</value>
  </data>
  <data name="UnpackFinished" xml:space="preserve">
    <value>Unpack finished.</value>
  </data>
  <data name="PackFinished" xml:space="preserve">
    <value>Pack finished.</value>
  </data>
  <data name="InputFile" xml:space="preserve">
    <value>Input file path:</value>
  </data>
  <data name="OutputFolder" xml:space="preserve">
    <value>Output folder path:</value>
  </data>
  <data name="InputFolder" xml:space="preserve">
    <value>Input folder path:</value>
  </data>
  <data name="OutputFile" xml:space="preserve">
    <value>Output file path:</value>
  </data>
  <data name="FileCountInside" xml:space="preserve">
    <value>{0} files inside.</value>
  </data>
  <data name="NewInstance" xml:space="preserve">
    <value>New Instance</value>
  </data>
  <data name="ErrorNotValidArc" xml:space="preserve">
    <value>Not a valid archive.</value>
  </data>
  <data name="ErrorOriginalFileNotFound" xml:space="preserve">
    <value>Original {0} file not found in the same directory.</value>
  </data>
  <data name="Unpacking" xml:space="preserve">
    <value>Unpacking……</value>
  </data>
  <data name="Packing" xml:space="preserve">
    <value>Packing……</value>
  </data>
  <data name="ErrorOccur" xml:space="preserve">
    <value>Error: {0}</value>
  </data>
  <data name="Versions" xml:space="preserve">
    <value>Current version: {0} Latest version: {1}</value>
  </data>
  <data name="ErrorSpecifiedFileNotFound" xml:space="preserve">
    <value>{0} file not found in the same directory.</value>
  </data>
  <data name="ImportGARbroDBScheme" xml:space="preserve">
    <value>Import {0} schemes from GARbroDB.</value>
  </data>
  <data name="ImportDataBaseScheme" xml:space="preserve">
    <value>{0}: Import {1} schemes.</value>
  </data>
  <data name="Ready" xml:space="preserve">
    <value>Ready</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Loading……</value>
  </data>
  <data name="SchemeCount" xml:space="preserve">
    <value>Scheme count: {0}</value>
  </data>
  <data name="ValidDatabaseCount" xml:space="preserve">
    <value>Valid database count: {0}</value>
  </data>
  <data name="ImportedSchemeCount" xml:space="preserve">
    <value>Imported scheme count: {0}</value>
  </data>
  <data name="SelectUnpackNode" xml:space="preserve">
    <value>Unpack mode: {0} {1} selected.</value>
  </data>
  <data name="SelectPackNode" xml:space="preserve">
    <value>Pack mode: {0} {1} selected.</value>
  </data>
  <data name="TimedOut" xml:space="preserve">
    <value>Timed out.</value>
  </data>
  <data name="ErrorNeedSpecifyInput" xml:space="preserve">
    <value>Please specify input path.</value>
  </data>
  <data name="ErrorNeedSpecifyOutput" xml:space="preserve">
    <value>Please specify output path.</value>
  </data>
  <data name="ErrorFileNotFound" xml:space="preserve">
    <value>File specified does not exist.</value>
  </data>
  <data name="ErrorDirNotFound" xml:space="preserve">
    <value>Folder specified does not exist.</value>
  </data>
  <data name="ErrorNeedSelectOperation" xml:space="preserve">
    <value>Please select operation.</value>
  </data>
  <data name="ErrorFileNameFailToMatch" xml:space="preserve">
    <value>File name must be {0}.</value>
  </data>
  <data name="ErrorUnpackMethodNotFound" xml:space="preserve">
    <value>Specified unpack method not found.</value>
  </data>
  <data name="ErrorPackMethodNotFound" xml:space="preserve">
    <value>Specified pack method not found.</value>
  </data>
  <data name="ErrorClassNotFound" xml:space="preserve">
    <value>Specified class not found.</value>
  </data>
</root>